{"version":3,"file":"static/js/548.30aa7a8e.chunk.js","mappings":"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","sources":["utils/CursorFluid.js"],"sourcesContent":["'use strict';\n\nconst canvas = document.getElementsByTagName('canvas')[0];\ncanvas.width = canvas.clientWidth;\ncanvas.height = canvas.clientHeight;\n\nlet config = {\n  TEXTURE_DOWNSAMPLE: 1,\n  DENSITY_DISSIPATION: 0.98,\n  VELOCITY_DISSIPATION: 0.79,\n  PRESSURE_DISSIPATION: 0.8,\n  PRESSURE_ITERATIONS: 25,\n  CURL: 30,\n  SPLAT_RADIUS: 0.0009,\n};\n\nlet pointers = [];\nlet splatStack = [];\n\nconst { gl, ext } = getWebGLContext(canvas);\n\nfunction getWebGLContext(canvas) {\n  const params = {\n    alpha: false,\n    depth: false,\n    stencil: false,\n    antialias: false,\n  };\n\n  let gl = canvas.getContext('webgl2', params);\n  const isWebGL2 = !!gl;\n  if (!isWebGL2)\n    gl =\n      canvas.getContext('webgl', params) ||\n      canvas.getContext('experimental-webgl', params);\n\n  let halfFloat;\n  let supportLinearFiltering;\n  if (isWebGL2) {\n    gl.getExtension('EXT_color_buffer_float');\n    supportLinearFiltering = gl.getExtension('OES_texture_float_linear');\n  } else {\n    halfFloat = gl.getExtension('OES_texture_half_float');\n    supportLinearFiltering = gl.getExtension('OES_texture_half_float_linear');\n  }\n\n  gl.clearColor(0.0, 0.0, 0.0, 1.0);\n\n  const halfFloatTexType = isWebGL2 ? gl.HALF_FLOAT : halfFloat.HALF_FLOAT_OES;\n  let formatRGBA;\n  let formatRG;\n  let formatR;\n\n  if (isWebGL2) {\n    formatRGBA = getSupportedFormat(gl, gl.RGBA16F, gl.RGBA, halfFloatTexType);\n    formatRG = getSupportedFormat(gl, gl.RG16F, gl.RG, halfFloatTexType);\n    formatR = getSupportedFormat(gl, gl.R16F, gl.RED, halfFloatTexType);\n  } else {\n    formatRGBA = getSupportedFormat(gl, gl.RGBA, gl.RGBA, halfFloatTexType);\n    formatRG = getSupportedFormat(gl, gl.RGBA, gl.RGBA, halfFloatTexType);\n    formatR = getSupportedFormat(gl, gl.RGBA, gl.RGBA, halfFloatTexType);\n  }\n\n  return {\n    gl,\n    ext: {\n      formatRGBA,\n      formatRG,\n      formatR,\n      halfFloatTexType,\n      supportLinearFiltering,\n    },\n  };\n}\n\nfunction getSupportedFormat(gl, internalFormat, format, type) {\n  if (!supportRenderTextureFormat(gl, internalFormat, format, type)) {\n    switch (internalFormat) {\n      case gl.R16F:\n        return getSupportedFormat(gl, gl.RG16F, gl.RG, type);\n      case gl.RG16F:\n        return getSupportedFormat(gl, gl.RGBA16F, gl.RGBA, type);\n      default:\n        return null;\n    }\n  }\n\n  return {\n    internalFormat,\n    format,\n  };\n}\n\nfunction supportRenderTextureFormat(gl, internalFormat, format, type) {\n  let texture = gl.createTexture();\n  gl.bindTexture(gl.TEXTURE_2D, texture);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n  gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, 4, 4, 0, format, type, null);\n\n  let fbo = gl.createFramebuffer();\n  gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);\n  gl.framebufferTexture2D(\n    gl.FRAMEBUFFER,\n    gl.COLOR_ATTACHMENT0,\n    gl.TEXTURE_2D,\n    texture,\n    0\n  );\n\n  const status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\n  if (status != gl.FRAMEBUFFER_COMPLETE) return false;\n  return true;\n}\n\nfunction pointerPrototype() {\n  this.id = -1;\n  this.x = 0;\n  this.y = 0;\n  this.dx = 0;\n  this.dy = 0;\n  this.down = false;\n  this.moved = false;\n  this.color = [30, 0, 300];\n}\n\npointers.push(new pointerPrototype());\n\nclass GLProgram {\n  constructor(vertexShader, fragmentShader) {\n    this.uniforms = {};\n    this.program = gl.createProgram();\n\n    gl.attachShader(this.program, vertexShader);\n    gl.attachShader(this.program, fragmentShader);\n    gl.linkProgram(this.program);\n\n    if (!gl.getProgramParameter(this.program, gl.LINK_STATUS))\n      throw gl.getProgramInfoLog(this.program);\n\n    const uniformCount = gl.getProgramParameter(\n      this.program,\n      gl.ACTIVE_UNIFORMS\n    );\n    for (let i = 0; i < uniformCount; i++) {\n      const uniformName = gl.getActiveUniform(this.program, i).name;\n      this.uniforms[uniformName] = gl.getUniformLocation(\n        this.program,\n        uniformName\n      );\n    }\n  }\n\n  bind() {\n    gl.useProgram(this.program);\n  }\n}\n\nfunction compileShader(type, source) {\n  const shader = gl.createShader(type);\n  gl.shaderSource(shader, source);\n  gl.compileShader(shader);\n\n  if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS))\n    throw gl.getShaderInfoLog(shader);\n\n  return shader;\n}\n\nconst baseVertexShader = compileShader(\n  gl.VERTEX_SHADER,\n  `\n    precision highp float;\n    precision mediump sampler2D;\n\n    attribute vec2 aPosition;\n    varying vec2 vUv;\n    varying vec2 vL;\n    varying vec2 vR;\n    varying vec2 vT;\n    varying vec2 vB;\n    uniform vec2 texelSize;\n\n    void main () {\n        vUv = aPosition * 0.5 + 0.5;\n        vL = vUv - vec2(texelSize.x, 0.0);\n        vR = vUv + vec2(texelSize.x, 0.0);\n        vT = vUv + vec2(0.0, texelSize.y);\n        vB = vUv - vec2(0.0, texelSize.y);\n        gl_Position = vec4(aPosition, 0.0, 1.0);\n    }\n`\n);\n\nconst clearShader = compileShader(\n  gl.FRAGMENT_SHADER,\n  `\n    precision highp float;\n    precision mediump sampler2D;\n\n    varying vec2 vUv;\n    uniform sampler2D uTexture;\n    uniform float value;\n\n    void main () {\n        gl_FragColor = value * texture2D(uTexture, vUv);\n    }\n`\n);\n\nconst displayShader = compileShader(\n  gl.FRAGMENT_SHADER,\n  `\n    precision highp float;\n    precision mediump sampler2D;\n\n    varying vec2 vUv;\n    uniform sampler2D uTexture;\n\n    void main () {\n        gl_FragColor = texture2D(uTexture, vUv);\n    }\n`\n);\n\nconst splatShader = compileShader(\n  gl.FRAGMENT_SHADER,\n  `\n    precision highp float;\n    precision mediump sampler2D;\n\n    varying vec2 vUv;\n    uniform sampler2D uTarget;\n    uniform float aspectRatio;\n    uniform vec3 color;\n    uniform vec2 point;\n    uniform float radius;\n\n    void main () {\n        vec2 p = vUv - point.xy;\n        p.x *= aspectRatio;\n        vec3 splat = exp(-dot(p, p) / radius) * color;\n        vec3 base = texture2D(uTarget, vUv).xyz;\n        gl_FragColor = vec4(base + splat, 1.0);\n    }\n`\n);\n\nconst advectionManualFilteringShader = compileShader(\n  gl.FRAGMENT_SHADER,\n  `\n    precision highp float;\n    precision mediump sampler2D;\n\n    varying vec2 vUv;\n    uniform sampler2D uVelocity;\n    uniform sampler2D uSource;\n    uniform vec2 texelSize;\n    uniform float dt;\n    uniform float dissipation;\n\n    vec4 bilerp (in sampler2D sam, in vec2 p) {\n        vec4 st;\n        st.xy = floor(p - 0.5) + 0.5;\n        st.zw = st.xy + 1.0;\n        vec4 uv = st * texelSize.xyxy;\n        vec4 a = texture2D(sam, uv.xy);\n        vec4 b = texture2D(sam, uv.zy);\n        vec4 c = texture2D(sam, uv.xw);\n        vec4 d = texture2D(sam, uv.zw);\n        vec2 f = p - st.xy;\n        return mix(mix(a, b, f.x), mix(c, d, f.x), f.y);\n    }\n\n    void main () {\n        vec2 coord = gl_FragCoord.xy - dt * texture2D(uVelocity, vUv).xy;\n        gl_FragColor = dissipation * bilerp(uSource, coord);\n        gl_FragColor.a = 1.0;\n    }\n`\n);\n\nconst advectionShader = compileShader(\n  gl.FRAGMENT_SHADER,\n  `\n    precision highp float;\n    precision mediump sampler2D;\n\n    varying vec2 vUv;\n    uniform sampler2D uVelocity;\n    uniform sampler2D uSource;\n    uniform vec2 texelSize;\n    uniform float dt;\n    uniform float dissipation;\n\n    void main () {\n        vec2 coord = vUv - dt * texture2D(uVelocity, vUv).xy * texelSize;\n        gl_FragColor = dissipation * texture2D(uSource, coord);\n        gl_FragColor.a = 1.0;\n    }\n`\n);\n\nconst divergenceShader = compileShader(\n  gl.FRAGMENT_SHADER,\n  `\n    precision highp float;\n    precision mediump sampler2D;\n\n    varying vec2 vUv;\n    varying vec2 vL;\n    varying vec2 vR;\n    varying vec2 vT;\n    varying vec2 vB;\n    uniform sampler2D uVelocity;\n\n    vec2 sampleVelocity (in vec2 uv) {\n        vec2 multiplier = vec2(1.0, 1.0);\n        if (uv.x < 0.0) { uv.x = 0.0; multiplier.x = -1.0; }\n        if (uv.x > 1.0) { uv.x = 1.0; multiplier.x = -1.0; }\n        if (uv.y < 0.0) { uv.y = 0.0; multiplier.y = -1.0; }\n        if (uv.y > 1.0) { uv.y = 1.0; multiplier.y = -1.0; }\n        return multiplier * texture2D(uVelocity, uv).xy;\n    }\n\n    void main () {\n        float L = sampleVelocity(vL).x;\n        float R = sampleVelocity(vR).x;\n        float T = sampleVelocity(vT).y;\n        float B = sampleVelocity(vB).y;\n        float div = 0.5 * (R - L + T - B);\n        gl_FragColor = vec4(div, 0.0, 0.0, 1.0);\n    }\n`\n);\n\nconst curlShader = compileShader(\n  gl.FRAGMENT_SHADER,\n  `\n    precision highp float;\n    precision mediump sampler2D;\n\n    varying vec2 vUv;\n    varying vec2 vL;\n    varying vec2 vR;\n    varying vec2 vT;\n    varying vec2 vB;\n    uniform sampler2D uVelocity;\n\n    void main () {\n        float L = texture2D(uVelocity, vL).y;\n        float R = texture2D(uVelocity, vR).y;\n        float T = texture2D(uVelocity, vT).x;\n        float B = texture2D(uVelocity, vB).x;\n        float vorticity = R - L - T + B;\n        gl_FragColor = vec4(vorticity, 0.0, 0.0, 1.0);\n    }\n`\n);\n\nconst vorticityShader = compileShader(\n  gl.FRAGMENT_SHADER,\n  `\n    precision highp float;\n    precision mediump sampler2D;\n\n    varying vec2 vUv;\n    varying vec2 vT;\n    varying vec2 vB;\n    uniform sampler2D uVelocity;\n    uniform sampler2D uCurl;\n    uniform float curl;\n    uniform float dt;\n\n    void main () {\n        float T = texture2D(uCurl, vT).x;\n        float B = texture2D(uCurl, vB).x;\n        float C = texture2D(uCurl, vUv).x;\n        vec2 force = vec2(abs(T) - abs(B), 0.0);\n        force *= 1.0 / length(force + 0.00001) * curl * C;\n        vec2 vel = texture2D(uVelocity, vUv).xy;\n        gl_FragColor = vec4(vel + force * dt, 0.0, 1.0);\n    }\n`\n);\n\nconst pressureShader = compileShader(\n  gl.FRAGMENT_SHADER,\n  `\n    precision highp float;\n    precision mediump sampler2D;\n\n    varying vec2 vUv;\n    varying vec2 vL;\n    varying vec2 vR;\n    varying vec2 vT;\n    varying vec2 vB;\n    uniform sampler2D uPressure;\n    uniform sampler2D uDivergence;\n\n    vec2 boundary (in vec2 uv) {\n        uv = min(max(uv, 0.0), 1.0);\n        return uv;\n    }\n\n    void main () {\n        float L = texture2D(uPressure, boundary(vL)).x;\n        float R = texture2D(uPressure, boundary(vR)).x;\n        float T = texture2D(uPressure, boundary(vT)).x;\n        float B = texture2D(uPressure, boundary(vB)).x;\n        float C = texture2D(uPressure, vUv).x;\n        float divergence = texture2D(uDivergence, vUv).x;\n        float pressure = (L + R + B + T - divergence) * 0.25;\n        gl_FragColor = vec4(pressure, 0.0, 0.0, 1.0);\n    }\n`\n);\n\nconst gradientSubtractShader = compileShader(\n  gl.FRAGMENT_SHADER,\n  `\n    precision highp float;\n    precision mediump sampler2D;\n\n    varying vec2 vUv;\n    varying vec2 vL;\n    varying vec2 vR;\n    varying vec2 vT;\n    varying vec2 vB;\n    uniform sampler2D uPressure;\n    uniform sampler2D uVelocity;\n\n    vec2 boundary (in vec2 uv) {\n        uv = min(max(uv, 0.0), 1.0);\n        return uv;\n    }\n\n    void main () {\n        float L = texture2D(uPressure, boundary(vL)).x;\n        float R = texture2D(uPressure, boundary(vR)).x;\n        float T = texture2D(uPressure, boundary(vT)).x;\n        float B = texture2D(uPressure, boundary(vB)).x;\n        vec2 velocity = texture2D(uVelocity, vUv).xy;\n        velocity.xy -= vec2(R - L, T - B);\n        gl_FragColor = vec4(velocity, 0.0, 1.0);\n    }\n`\n);\n\nlet textureWidth;\nlet textureHeight;\nlet density;\nlet velocity;\nlet divergence;\nlet curl;\nlet pressure;\ninitFramebuffers();\n\nconst clearProgram = new GLProgram(baseVertexShader, clearShader);\nconst displayProgram = new GLProgram(baseVertexShader, displayShader);\nconst splatProgram = new GLProgram(baseVertexShader, splatShader);\nconst advectionProgram = new GLProgram(\n  baseVertexShader,\n  ext.supportLinearFiltering ? advectionShader : advectionManualFilteringShader\n);\nconst divergenceProgram = new GLProgram(baseVertexShader, divergenceShader);\nconst curlProgram = new GLProgram(baseVertexShader, curlShader);\nconst vorticityProgram = new GLProgram(baseVertexShader, vorticityShader);\nconst pressureProgram = new GLProgram(baseVertexShader, pressureShader);\nconst gradienSubtractProgram = new GLProgram(\n  baseVertexShader,\n  gradientSubtractShader\n);\n\nfunction initFramebuffers() {\n  textureWidth = gl.drawingBufferWidth >> config.TEXTURE_DOWNSAMPLE;\n  textureHeight = gl.drawingBufferHeight >> config.TEXTURE_DOWNSAMPLE;\n\n  const texType = ext.halfFloatTexType;\n  const rgba = ext.formatRGBA;\n  const rg = ext.formatRG;\n  const r = ext.formatR;\n\n  density = createDoubleFBO(\n    2,\n    textureWidth,\n    textureHeight,\n    rgba.internalFormat,\n    rgba.format,\n    texType,\n    ext.supportLinearFiltering ? gl.LINEAR : gl.NEAREST\n  );\n  velocity = createDoubleFBO(\n    0,\n    textureWidth,\n    textureHeight,\n    rg.internalFormat,\n    rg.format,\n    texType,\n    ext.supportLinearFiltering ? gl.LINEAR : gl.NEAREST\n  );\n  divergence = createFBO(\n    4,\n    textureWidth,\n    textureHeight,\n    r.internalFormat,\n    r.format,\n    texType,\n    gl.NEAREST\n  );\n  curl = createFBO(\n    5,\n    textureWidth,\n    textureHeight,\n    r.internalFormat,\n    r.format,\n    texType,\n    gl.NEAREST\n  );\n  pressure = createDoubleFBO(\n    6,\n    textureWidth,\n    textureHeight,\n    r.internalFormat,\n    r.format,\n    texType,\n    gl.NEAREST\n  );\n}\n\nfunction createFBO(texId, w, h, internalFormat, format, type, param) {\n  gl.activeTexture(gl.TEXTURE0 + texId);\n  let texture = gl.createTexture();\n  gl.bindTexture(gl.TEXTURE_2D, texture);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, param);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, param);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n  gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, w, h, 0, format, type, null);\n\n  let fbo = gl.createFramebuffer();\n  gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);\n  gl.framebufferTexture2D(\n    gl.FRAMEBUFFER,\n    gl.COLOR_ATTACHMENT0,\n    gl.TEXTURE_2D,\n    texture,\n    0\n  );\n  gl.viewport(0, 0, w, h);\n  gl.clear(gl.COLOR_BUFFER_BIT);\n\n  return [texture, fbo, texId];\n}\n\nfunction createDoubleFBO(texId, w, h, internalFormat, format, type, param) {\n  let fbo1 = createFBO(texId, w, h, internalFormat, format, type, param);\n  let fbo2 = createFBO(texId + 1, w, h, internalFormat, format, type, param);\n\n  return {\n    get read() {\n      return fbo1;\n    },\n    get write() {\n      return fbo2;\n    },\n    swap() {\n      let temp = fbo1;\n      fbo1 = fbo2;\n      fbo2 = temp;\n    },\n  };\n}\n\nconst blit = (() => {\n  gl.bindBuffer(gl.ARRAY_BUFFER, gl.createBuffer());\n  gl.bufferData(\n    gl.ARRAY_BUFFER,\n    new Float32Array([-1, -1, -1, 1, 1, 1, 1, -1]),\n    gl.STATIC_DRAW\n  );\n  gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, gl.createBuffer());\n  gl.bufferData(\n    gl.ELEMENT_ARRAY_BUFFER,\n    new Uint16Array([0, 1, 2, 0, 2, 3]),\n    gl.STATIC_DRAW\n  );\n  gl.vertexAttribPointer(0, 2, gl.FLOAT, false, 0, 0);\n  gl.enableVertexAttribArray(0);\n\n  return (destination) => {\n    gl.bindFramebuffer(gl.FRAMEBUFFER, destination);\n    gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0);\n  };\n})();\n\nlet lastTime = Date.now();\nmultipleSplats(parseInt(Math.random() * 20) + 5);\nupdate();\n\nfunction update() {\n  resizeCanvas();\n\n  const dt = Math.min((Date.now() - lastTime) / 1000, 0.016);\n  lastTime = Date.now();\n\n  gl.viewport(0, 0, textureWidth, textureHeight);\n\n  if (splatStack.length > 0) multipleSplats(splatStack.pop());\n\n  advectionProgram.bind();\n  gl.uniform2f(\n    advectionProgram.uniforms.texelSize,\n    1.0 / textureWidth,\n    1.0 / textureHeight\n  );\n  gl.uniform1i(advectionProgram.uniforms.uVelocity, velocity.read[2]);\n  gl.uniform1i(advectionProgram.uniforms.uSource, velocity.read[2]);\n  gl.uniform1f(advectionProgram.uniforms.dt, dt);\n  gl.uniform1f(\n    advectionProgram.uniforms.dissipation,\n    config.VELOCITY_DISSIPATION\n  );\n  blit(velocity.write[1]);\n  velocity.swap();\n\n  gl.uniform1i(advectionProgram.uniforms.uVelocity, velocity.read[2]);\n  gl.uniform1i(advectionProgram.uniforms.uSource, density.read[2]);\n  gl.uniform1f(\n    advectionProgram.uniforms.dissipation,\n    config.DENSITY_DISSIPATION\n  );\n  blit(density.write[1]);\n  density.swap();\n\n  for (let i = 0; i < pointers.length; i++) {\n    const pointer = pointers[i];\n    if (pointer.moved) {\n      splat(pointer.x, pointer.y, pointer.dx, pointer.dy, pointer.color);\n      pointer.moved = false;\n    }\n  }\n\n  curlProgram.bind();\n  gl.uniform2f(\n    curlProgram.uniforms.texelSize,\n    1.0 / textureWidth,\n    1.0 / textureHeight\n  );\n  gl.uniform1i(curlProgram.uniforms.uVelocity, velocity.read[2]);\n  blit(curl[1]);\n\n  vorticityProgram.bind();\n  gl.uniform2f(\n    vorticityProgram.uniforms.texelSize,\n    1.0 / textureWidth,\n    1.0 / textureHeight\n  );\n  gl.uniform1i(vorticityProgram.uniforms.uVelocity, velocity.read[2]);\n  gl.uniform1i(vorticityProgram.uniforms.uCurl, curl[2]);\n  gl.uniform1f(vorticityProgram.uniforms.curl, config.CURL);\n  gl.uniform1f(vorticityProgram.uniforms.dt, dt);\n  blit(velocity.write[1]);\n  velocity.swap();\n\n  divergenceProgram.bind();\n  gl.uniform2f(\n    divergenceProgram.uniforms.texelSize,\n    1.0 / textureWidth,\n    1.0 / textureHeight\n  );\n  gl.uniform1i(divergenceProgram.uniforms.uVelocity, velocity.read[2]);\n  blit(divergence[1]);\n\n  clearProgram.bind();\n  let pressureTexId = pressure.read[2];\n  gl.activeTexture(gl.TEXTURE0 + pressureTexId);\n  gl.bindTexture(gl.TEXTURE_2D, pressure.read[0]);\n  gl.uniform1i(clearProgram.uniforms.uTexture, pressureTexId);\n  gl.uniform1f(clearProgram.uniforms.value, config.PRESSURE_DISSIPATION);\n  blit(pressure.write[1]);\n  pressure.swap();\n\n  pressureProgram.bind();\n  gl.uniform2f(\n    pressureProgram.uniforms.texelSize,\n    1.0 / textureWidth,\n    1.0 / textureHeight\n  );\n  gl.uniform1i(pressureProgram.uniforms.uDivergence, divergence[2]);\n  pressureTexId = pressure.read[2];\n  gl.uniform1i(pressureProgram.uniforms.uPressure, pressureTexId);\n  gl.activeTexture(gl.TEXTURE0 + pressureTexId);\n  for (let i = 0; i < config.PRESSURE_ITERATIONS; i++) {\n    gl.bindTexture(gl.TEXTURE_2D, pressure.read[0]);\n    blit(pressure.write[1]);\n    pressure.swap();\n  }\n\n  gradienSubtractProgram.bind();\n  gl.uniform2f(\n    gradienSubtractProgram.uniforms.texelSize,\n    1.0 / textureWidth,\n    1.0 / textureHeight\n  );\n  gl.uniform1i(gradienSubtractProgram.uniforms.uPressure, pressure.read[2]);\n  gl.uniform1i(gradienSubtractProgram.uniforms.uVelocity, velocity.read[2]);\n  blit(velocity.write[1]);\n  velocity.swap();\n\n  gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n  displayProgram.bind();\n  gl.uniform1i(displayProgram.uniforms.uTexture, density.read[2]);\n  blit(null);\n\n  requestAnimationFrame(update);\n}\n\nfunction splat(x, y, dx, dy, color) {\n  splatProgram.bind();\n  gl.uniform1i(splatProgram.uniforms.uTarget, velocity.read[2]);\n  gl.uniform1f(splatProgram.uniforms.aspectRatio, canvas.width / canvas.height);\n  gl.uniform2f(\n    splatProgram.uniforms.point,\n    x / canvas.width,\n    1.0 - y / canvas.height\n  );\n  gl.uniform3f(splatProgram.uniforms.color, dx, -dy, 1.0);\n  gl.uniform1f(splatProgram.uniforms.radius, config.SPLAT_RADIUS);\n  blit(velocity.write[1]);\n  velocity.swap();\n\n  gl.uniform1i(splatProgram.uniforms.uTarget, density.read[2]);\n  gl.uniform3f(\n    splatProgram.uniforms.color,\n    color[0] * 0.3,\n    color[1] * 0.3,\n    color[2] * 0.3\n  );\n  blit(density.write[1]);\n  density.swap();\n}\n\nfunction multipleSplats(amount) {\n  for (let i = 0; i < amount; i++) {\n    const color = [Math.random() * 10, Math.random() * 10, Math.random() * 10];\n    const x = canvas.width * Math.random();\n    const y = canvas.height * Math.random();\n    const dx = 1000 * (Math.random() - 0.5);\n    const dy = 1000 * (Math.random() - 0.5);\n    splat(x, y, dx, dy, color);\n  }\n}\n\nfunction resizeCanvas() {\n  if (\n    canvas.width != canvas.clientWidth ||\n    canvas.height != canvas.clientHeight\n  ) {\n    canvas.width = canvas.clientWidth;\n    canvas.height = canvas.clientHeight;\n    initFramebuffers();\n  }\n}\n\nwindow.addEventListener('mousemove', ({ clientX, clientY }) => {\n  pointers[0].moved = pointers[0].down;\n  pointers[0].dx = (clientX - pointers[0].x) * 10.0;\n  pointers[0].dy = (clientY - pointers[0].y) * 10.0;\n  pointers[0].x = clientX;\n  pointers[0].y = clientY;\n});\n\nwindow.addEventListener('mouseover', () => {\n  pointers[0].down = true;\n  pointers[0].color = [\n    Math.random() + 0.2,\n    Math.random() + 0.2,\n    Math.random() + 0.2,\n  ];\n});\n\ncanvas.addEventListener(\n  'touchmove',\n  (e) => {\n    e.preventDefault();\n    const touches = e.targetTouches;\n    for (let i = 0; i < touches.length; i++) {\n      let pointer = pointers[i];\n      pointer.moved = pointer.down;\n      pointer.dx = (touches[i].pageX - pointer.x) * 10.0;\n      pointer.dy = (touches[i].pageY - pointer.y) * 10.0;\n      pointer.x = touches[i].pageX;\n      pointer.y = touches[i].pageY;\n    }\n  },\n  false\n);\n\ncanvas.addEventListener('touchstart', (e) => {\n  e.preventDefault();\n  const touches = e.targetTouches;\n  for (let i = 0; i < touches.length; i++) {\n    if (i >= pointers.length) pointers.push(new pointerPrototype());\n\n    pointers[i].id = touches[i].identifier;\n    pointers[i].down = true;\n    pointers[i].x = touches[i].pageX;\n    pointers[i].y = touches[i].pageY;\n    pointers[i].color = [\n      Math.random() + 0.2,\n      Math.random() + 0.2,\n      Math.random() + 0.2,\n    ];\n  }\n});\n\nwindow.addEventListener('mouseup', () => {\n  pointers[0].down = false;\n});\n\nwindow.addEventListener('touchend', (e) => {\n  const touches = e.changedTouches;\n  for (let i = 0; i < touches.length; i++)\n    for (let j = 0; j < pointers.length; j++)\n      if (touches[i].identifier == pointers[j].id) pointers[j].down = false;\n});\n"],"names":["canvas","document","getElementsByTagName","width","clientWidth","height","clientHeight","config","TEXTURE_DOWNSAMPLE","DENSITY_DISSIPATION","VELOCITY_DISSIPATION","PRESSURE_DISSIPATION","PRESSURE_ITERATIONS","CURL","SPLAT_RADIUS","pointers","splatStack","_getWebGLContext","halfFloat","supportLinearFiltering","params","alpha","depth","stencil","antialias","gl","getContext","isWebGL2","getExtension","clearColor","formatRGBA","formatRG","formatR","halfFloatTexType","HALF_FLOAT","HALF_FLOAT_OES","getSupportedFormat","RGBA16F","RGBA","RG16F","RG","R16F","RED","ext","getWebGLContext","internalFormat","format","type","texture","createTexture","bindTexture","TEXTURE_2D","texParameteri","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","texImage2D","fbo","createFramebuffer","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","status","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","supportRenderTextureFormat","pointerPrototype","this","id","x","y","dx","dy","down","moved","color","push","GLProgram","vertexShader","fragmentShader","_classCallCheck","uniforms","program","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","uniformCount","ACTIVE_UNIFORMS","i","uniformName","getActiveUniform","name","getUniformLocation","_createClass","key","value","useProgram","compileShader","source","shader","createShader","shaderSource","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","textureWidth","textureHeight","density","velocity","divergence","curl","pressure","baseVertexShader","VERTEX_SHADER","clearShader","FRAGMENT_SHADER","displayShader","splatShader","advectionManualFilteringShader","advectionShader","divergenceShader","curlShader","vorticityShader","pressureShader","gradientSubtractShader","initFramebuffers","clearProgram","displayProgram","splatProgram","advectionProgram","divergenceProgram","curlProgram","vorticityProgram","pressureProgram","gradienSubtractProgram","drawingBufferWidth","drawingBufferHeight","texType","rgba","rg","r","createDoubleFBO","LINEAR","createFBO","texId","w","h","param","activeTexture","TEXTURE0","viewport","clear","COLOR_BUFFER_BIT","fbo1","fbo2","read","write","swap","temp","blit","bindBuffer","ARRAY_BUFFER","createBuffer","bufferData","Float32Array","STATIC_DRAW","ELEMENT_ARRAY_BUFFER","Uint16Array","vertexAttribPointer","FLOAT","enableVertexAttribArray","destination","drawElements","TRIANGLES","UNSIGNED_SHORT","lastTime","Date","now","splat","bind","uniform1i","uTarget","uniform1f","aspectRatio","uniform2f","point","uniform3f","radius","multipleSplats","amount","Math","random","parseInt","update","dt","min","length","pop","texelSize","uVelocity","uSource","dissipation","pointer","uCurl","pressureTexId","uTexture","uDivergence","uPressure","requestAnimationFrame","window","addEventListener","_ref","clientX","clientY","e","preventDefault","touches","targetTouches","pageX","pageY","identifier","changedTouches","j"],"sourceRoot":""}