{"version":3,"file":"static/js/80.cd77f303.chunk.js","mappings":"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","sources":["utils/CursorFluid.js"],"sourcesContent":["'use strict';\n\nconst canvas = document.getElementsByTagName('canvas')[0];\ncanvas.width = canvas.clientWidth;\ncanvas.height = canvas.clientHeight;\n\nlet config = {\n  TEXTURE_DOWNSAMPLE: 1,\n  DENSITY_DISSIPATION: 0.98,\n  VELOCITY_DISSIPATION: 0.79,\n  PRESSURE_DISSIPATION: 0.8,\n  PRESSURE_ITERATIONS: 25,\n  CURL: 30,\n  SPLAT_RADIUS: 0.0009,\n};\n\nlet pointers = [];\nlet splatStack = [];\n\nconst { gl, ext } = getWebGLContext(canvas);\n\nfunction getWebGLContext(canvas) {\n  const params = {\n    alpha: false,\n    depth: false,\n    stencil: false,\n    antialias: false,\n  };\n\n  let gl = canvas.getContext('webgl2', params);\n  const isWebGL2 = !!gl;\n  if (!isWebGL2)\n    gl =\n      canvas.getContext('webgl', params) ||\n      canvas.getContext('experimental-webgl', params);\n\n  let halfFloat;\n  let supportLinearFiltering;\n  if (isWebGL2) {\n    gl.getExtension('EXT_color_buffer_float');\n    supportLinearFiltering = gl.getExtension('OES_texture_float_linear');\n  } else {\n    halfFloat = gl.getExtension('OES_texture_half_float');\n    supportLinearFiltering = gl.getExtension('OES_texture_half_float_linear');\n  }\n\n  gl.clearColor(0.0, 0.0, 0.0, 1.0);\n\n  const halfFloatTexType = isWebGL2 ? gl.HALF_FLOAT : halfFloat.HALF_FLOAT_OES;\n  let formatRGBA;\n  let formatRG;\n  let formatR;\n\n  if (isWebGL2) {\n    formatRGBA = getSupportedFormat(gl, gl.RGBA16F, gl.RGBA, halfFloatTexType);\n    formatRG = getSupportedFormat(gl, gl.RG16F, gl.RG, halfFloatTexType);\n    formatR = getSupportedFormat(gl, gl.R16F, gl.RED, halfFloatTexType);\n  } else {\n    formatRGBA = getSupportedFormat(gl, gl.RGBA, gl.RGBA, halfFloatTexType);\n    formatRG = getSupportedFormat(gl, gl.RGBA, gl.RGBA, halfFloatTexType);\n    formatR = getSupportedFormat(gl, gl.RGBA, gl.RGBA, halfFloatTexType);\n  }\n\n  return {\n    gl,\n    ext: {\n      formatRGBA,\n      formatRG,\n      formatR,\n      halfFloatTexType,\n      supportLinearFiltering,\n    },\n  };\n}\n\nfunction getSupportedFormat(gl, internalFormat, format, type) {\n  if (!supportRenderTextureFormat(gl, internalFormat, format, type)) {\n    switch (internalFormat) {\n      case gl.R16F:\n        return getSupportedFormat(gl, gl.RG16F, gl.RG, type);\n      case gl.RG16F:\n        return getSupportedFormat(gl, gl.RGBA16F, gl.RGBA, type);\n      default:\n        return null;\n    }\n  }\n\n  return {\n    internalFormat,\n    format,\n  };\n}\n\nfunction supportRenderTextureFormat(gl, internalFormat, format, type) {\n  let texture = gl.createTexture();\n  gl.bindTexture(gl.TEXTURE_2D, texture);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n  gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, 4, 4, 0, format, type, null);\n\n  let fbo = gl.createFramebuffer();\n  gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);\n  gl.framebufferTexture2D(\n    gl.FRAMEBUFFER,\n    gl.COLOR_ATTACHMENT0,\n    gl.TEXTURE_2D,\n    texture,\n    0\n  );\n\n  const status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\n  if (status != gl.FRAMEBUFFER_COMPLETE) return false;\n  return true;\n}\n\nfunction pointerPrototype() {\n  this.id = -1;\n  this.x = 0;\n  this.y = 0;\n  this.dx = 0;\n  this.dy = 0;\n  this.down = false;\n  this.moved = false;\n  this.color = [30, 0, 300];\n}\n\npointers.push(new pointerPrototype());\n\nclass GLProgram {\n  constructor(vertexShader, fragmentShader) {\n    this.uniforms = {};\n    this.program = gl.createProgram();\n\n    gl.attachShader(this.program, vertexShader);\n    gl.attachShader(this.program, fragmentShader);\n    gl.linkProgram(this.program);\n\n    if (!gl.getProgramParameter(this.program, gl.LINK_STATUS))\n      throw gl.getProgramInfoLog(this.program);\n\n    const uniformCount = gl.getProgramParameter(\n      this.program,\n      gl.ACTIVE_UNIFORMS\n    );\n    for (let i = 0; i < uniformCount; i++) {\n      const uniformName = gl.getActiveUniform(this.program, i).name;\n      this.uniforms[uniformName] = gl.getUniformLocation(\n        this.program,\n        uniformName\n      );\n    }\n  }\n\n  bind() {\n    gl.useProgram(this.program);\n  }\n}\n\nfunction compileShader(type, source) {\n  const shader = gl.createShader(type);\n  gl.shaderSource(shader, source);\n  gl.compileShader(shader);\n\n  if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS))\n    throw gl.getShaderInfoLog(shader);\n\n  return shader;\n}\n\nconst baseVertexShader = compileShader(\n  gl.VERTEX_SHADER,\n  `\n    precision highp float;\n    precision mediump sampler2D;\n\n    attribute vec2 aPosition;\n    varying vec2 vUv;\n    varying vec2 vL;\n    varying vec2 vR;\n    varying vec2 vT;\n    varying vec2 vB;\n    uniform vec2 texelSize;\n\n    void main () {\n        vUv = aPosition * 0.5 + 0.5;\n        vL = vUv - vec2(texelSize.x, 0.0);\n        vR = vUv + vec2(texelSize.x, 0.0);\n        vT = vUv + vec2(0.0, texelSize.y);\n        vB = vUv - vec2(0.0, texelSize.y);\n        gl_Position = vec4(aPosition, 0.0, 1.0);\n    }\n`\n);\n\nconst clearShader = compileShader(\n  gl.FRAGMENT_SHADER,\n  `\n    precision highp float;\n    precision mediump sampler2D;\n\n    varying vec2 vUv;\n    uniform sampler2D uTexture;\n    uniform float value;\n\n    void main () {\n        gl_FragColor = value * texture2D(uTexture, vUv);\n    }\n`\n);\n\nconst displayShader = compileShader(\n  gl.FRAGMENT_SHADER,\n  `\n    precision highp float;\n    precision mediump sampler2D;\n\n    varying vec2 vUv;\n    uniform sampler2D uTexture;\n\n    void main () {\n        gl_FragColor = texture2D(uTexture, vUv);\n    }\n`\n);\n\nconst splatShader = compileShader(\n  gl.FRAGMENT_SHADER,\n  `\n    precision highp float;\n    precision mediump sampler2D;\n\n    varying vec2 vUv;\n    uniform sampler2D uTarget;\n    uniform float aspectRatio;\n    uniform vec3 color;\n    uniform vec2 point;\n    uniform float radius;\n\n    void main () {\n        vec2 p = vUv - point.xy;\n        p.x *= aspectRatio;\n        vec3 splat = exp(-dot(p, p) / radius) * color;\n        vec3 base = texture2D(uTarget, vUv).xyz;\n        gl_FragColor = vec4(base + splat, 1.0);\n    }\n`\n);\n\nconst advectionManualFilteringShader = compileShader(\n  gl.FRAGMENT_SHADER,\n  `\n    precision highp float;\n    precision mediump sampler2D;\n\n    varying vec2 vUv;\n    uniform sampler2D uVelocity;\n    uniform sampler2D uSource;\n    uniform vec2 texelSize;\n    uniform float dt;\n    uniform float dissipation;\n\n    vec4 bilerp (in sampler2D sam, in vec2 p) {\n        vec4 st;\n        st.xy = floor(p - 0.5) + 0.5;\n        st.zw = st.xy + 1.0;\n        vec4 uv = st * texelSize.xyxy;\n        vec4 a = texture2D(sam, uv.xy);\n        vec4 b = texture2D(sam, uv.zy);\n        vec4 c = texture2D(sam, uv.xw);\n        vec4 d = texture2D(sam, uv.zw);\n        vec2 f = p - st.xy;\n        return mix(mix(a, b, f.x), mix(c, d, f.x), f.y);\n    }\n\n    void main () {\n        vec2 coord = gl_FragCoord.xy - dt * texture2D(uVelocity, vUv).xy;\n        gl_FragColor = dissipation * bilerp(uSource, coord);\n        gl_FragColor.a = 1.0;\n    }\n`\n);\n\nconst advectionShader = compileShader(\n  gl.FRAGMENT_SHADER,\n  `\n    precision highp float;\n    precision mediump sampler2D;\n\n    varying vec2 vUv;\n    uniform sampler2D uVelocity;\n    uniform sampler2D uSource;\n    uniform vec2 texelSize;\n    uniform float dt;\n    uniform float dissipation;\n\n    void main () {\n        vec2 coord = vUv - dt * texture2D(uVelocity, vUv).xy * texelSize;\n        gl_FragColor = dissipation * texture2D(uSource, coord);\n        gl_FragColor.a = 1.0;\n    }\n`\n);\n\nconst divergenceShader = compileShader(\n  gl.FRAGMENT_SHADER,\n  `\n    precision highp float;\n    precision mediump sampler2D;\n\n    varying vec2 vUv;\n    varying vec2 vL;\n    varying vec2 vR;\n    varying vec2 vT;\n    varying vec2 vB;\n    uniform sampler2D uVelocity;\n\n    vec2 sampleVelocity (in vec2 uv) {\n        vec2 multiplier = vec2(1.0, 1.0);\n        if (uv.x < 0.0) { uv.x = 0.0; multiplier.x = -1.0; }\n        if (uv.x > 1.0) { uv.x = 1.0; multiplier.x = -1.0; }\n        if (uv.y < 0.0) { uv.y = 0.0; multiplier.y = -1.0; }\n        if (uv.y > 1.0) { uv.y = 1.0; multiplier.y = -1.0; }\n        return multiplier * texture2D(uVelocity, uv).xy;\n    }\n\n    void main () {\n        float L = sampleVelocity(vL).x;\n        float R = sampleVelocity(vR).x;\n        float T = sampleVelocity(vT).y;\n        float B = sampleVelocity(vB).y;\n        float div = 0.5 * (R - L + T - B);\n        gl_FragColor = vec4(div, 0.0, 0.0, 1.0);\n    }\n`\n);\n\nconst curlShader = compileShader(\n  gl.FRAGMENT_SHADER,\n  `\n    precision highp float;\n    precision mediump sampler2D;\n\n    varying vec2 vUv;\n    varying vec2 vL;\n    varying vec2 vR;\n    varying vec2 vT;\n    varying vec2 vB;\n    uniform sampler2D uVelocity;\n\n    void main () {\n        float L = texture2D(uVelocity, vL).y;\n        float R = texture2D(uVelocity, vR).y;\n        float T = texture2D(uVelocity, vT).x;\n        float B = texture2D(uVelocity, vB).x;\n        float vorticity = R - L - T + B;\n        gl_FragColor = vec4(vorticity, 0.0, 0.0, 1.0);\n    }\n`\n);\n\nconst vorticityShader = compileShader(\n  gl.FRAGMENT_SHADER,\n  `\n    precision highp float;\n    precision mediump sampler2D;\n\n    varying vec2 vUv;\n    varying vec2 vT;\n    varying vec2 vB;\n    uniform sampler2D uVelocity;\n    uniform sampler2D uCurl;\n    uniform float curl;\n    uniform float dt;\n\n    void main () {\n        float T = texture2D(uCurl, vT).x;\n        float B = texture2D(uCurl, vB).x;\n        float C = texture2D(uCurl, vUv).x;\n        vec2 force = vec2(abs(T) - abs(B), 0.0);\n        force *= 1.0 / length(force + 0.00001) * curl * C;\n        vec2 vel = texture2D(uVelocity, vUv).xy;\n        gl_FragColor = vec4(vel + force * dt, 0.0, 1.0);\n    }\n`\n);\n\nconst pressureShader = compileShader(\n  gl.FRAGMENT_SHADER,\n  `\n    precision highp float;\n    precision mediump sampler2D;\n\n    varying vec2 vUv;\n    varying vec2 vL;\n    varying vec2 vR;\n    varying vec2 vT;\n    varying vec2 vB;\n    uniform sampler2D uPressure;\n    uniform sampler2D uDivergence;\n\n    vec2 boundary (in vec2 uv) {\n        uv = min(max(uv, 0.0), 1.0);\n        return uv;\n    }\n\n    void main () {\n        float L = texture2D(uPressure, boundary(vL)).x;\n        float R = texture2D(uPressure, boundary(vR)).x;\n        float T = texture2D(uPressure, boundary(vT)).x;\n        float B = texture2D(uPressure, boundary(vB)).x;\n        float C = texture2D(uPressure, vUv).x;\n        float divergence = texture2D(uDivergence, vUv).x;\n        float pressure = (L + R + B + T - divergence) * 0.25;\n        gl_FragColor = vec4(pressure, 0.0, 0.0, 1.0);\n    }\n`\n);\n\nconst gradientSubtractShader = compileShader(\n  gl.FRAGMENT_SHADER,\n  `\n    precision highp float;\n    precision mediump sampler2D;\n\n    varying vec2 vUv;\n    varying vec2 vL;\n    varying vec2 vR;\n    varying vec2 vT;\n    varying vec2 vB;\n    uniform sampler2D uPressure;\n    uniform sampler2D uVelocity;\n\n    vec2 boundary (in vec2 uv) {\n        uv = min(max(uv, 0.0), 1.0);\n        return uv;\n    }\n\n    void main () {\n        float L = texture2D(uPressure, boundary(vL)).x;\n        float R = texture2D(uPressure, boundary(vR)).x;\n        float T = texture2D(uPressure, boundary(vT)).x;\n        float B = texture2D(uPressure, boundary(vB)).x;\n        vec2 velocity = texture2D(uVelocity, vUv).xy;\n        velocity.xy -= vec2(R - L, T - B);\n        gl_FragColor = vec4(velocity, 0.0, 1.0);\n    }\n`\n);\n\nlet textureWidth;\nlet textureHeight;\nlet density;\nlet velocity;\nlet divergence;\nlet curl;\nlet pressure;\ninitFramebuffers();\n\nconst clearProgram = new GLProgram(baseVertexShader, clearShader);\nconst displayProgram = new GLProgram(baseVertexShader, displayShader);\nconst splatProgram = new GLProgram(baseVertexShader, splatShader);\nconst advectionProgram = new GLProgram(\n  baseVertexShader,\n  ext.supportLinearFiltering ? advectionShader : advectionManualFilteringShader\n);\nconst divergenceProgram = new GLProgram(baseVertexShader, divergenceShader);\nconst curlProgram = new GLProgram(baseVertexShader, curlShader);\nconst vorticityProgram = new GLProgram(baseVertexShader, vorticityShader);\nconst pressureProgram = new GLProgram(baseVertexShader, pressureShader);\nconst gradienSubtractProgram = new GLProgram(\n  baseVertexShader,\n  gradientSubtractShader\n);\n\nfunction initFramebuffers() {\n  textureWidth = gl.drawingBufferWidth >> config.TEXTURE_DOWNSAMPLE;\n  textureHeight = gl.drawingBufferHeight >> config.TEXTURE_DOWNSAMPLE;\n\n  const texType = ext.halfFloatTexType;\n  const rgba = ext.formatRGBA;\n  const rg = ext.formatRG;\n  const r = ext.formatR;\n\n  density = createDoubleFBO(\n    2,\n    textureWidth,\n    textureHeight,\n    rgba.internalFormat,\n    rgba.format,\n    texType,\n    ext.supportLinearFiltering ? gl.LINEAR : gl.NEAREST\n  );\n  velocity = createDoubleFBO(\n    0,\n    textureWidth,\n    textureHeight,\n    rg.internalFormat,\n    rg.format,\n    texType,\n    ext.supportLinearFiltering ? gl.LINEAR : gl.NEAREST\n  );\n  divergence = createFBO(\n    4,\n    textureWidth,\n    textureHeight,\n    r.internalFormat,\n    r.format,\n    texType,\n    gl.NEAREST\n  );\n  curl = createFBO(\n    5,\n    textureWidth,\n    textureHeight,\n    r.internalFormat,\n    r.format,\n    texType,\n    gl.NEAREST\n  );\n  pressure = createDoubleFBO(\n    6,\n    textureWidth,\n    textureHeight,\n    r.internalFormat,\n    r.format,\n    texType,\n    gl.NEAREST\n  );\n}\n\nfunction createFBO(texId, w, h, internalFormat, format, type, param) {\n  gl.activeTexture(gl.TEXTURE0 + texId);\n  let texture = gl.createTexture();\n  gl.bindTexture(gl.TEXTURE_2D, texture);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, param);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, param);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n  gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, w, h, 0, format, type, null);\n\n  let fbo = gl.createFramebuffer();\n  gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);\n  gl.framebufferTexture2D(\n    gl.FRAMEBUFFER,\n    gl.COLOR_ATTACHMENT0,\n    gl.TEXTURE_2D,\n    texture,\n    0\n  );\n  gl.viewport(0, 0, w, h);\n  gl.clear(gl.COLOR_BUFFER_BIT);\n\n  return [texture, fbo, texId];\n}\n\nfunction createDoubleFBO(texId, w, h, internalFormat, format, type, param) {\n  let fbo1 = createFBO(texId, w, h, internalFormat, format, type, param);\n  let fbo2 = createFBO(texId + 1, w, h, internalFormat, format, type, param);\n\n  return {\n    get read() {\n      return fbo1;\n    },\n    get write() {\n      return fbo2;\n    },\n    swap() {\n      let temp = fbo1;\n      fbo1 = fbo2;\n      fbo2 = temp;\n    },\n  };\n}\n\nconst blit = (() => {\n  gl.bindBuffer(gl.ARRAY_BUFFER, gl.createBuffer());\n  gl.bufferData(\n    gl.ARRAY_BUFFER,\n    new Float32Array([-1, -1, -1, 1, 1, 1, 1, -1]),\n    gl.STATIC_DRAW\n  );\n  gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, gl.createBuffer());\n  gl.bufferData(\n    gl.ELEMENT_ARRAY_BUFFER,\n    new Uint16Array([0, 1, 2, 0, 2, 3]),\n    gl.STATIC_DRAW\n  );\n  gl.vertexAttribPointer(0, 2, gl.FLOAT, false, 0, 0);\n  gl.enableVertexAttribArray(0);\n\n  return (destination) => {\n    gl.bindFramebuffer(gl.FRAMEBUFFER, destination);\n    gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0);\n  };\n})();\n\nlet lastTime = Date.now();\nmultipleSplats(parseInt(Math.random() * 20) + 5);\nupdate();\n\nfunction update() {\n  resizeCanvas();\n\n  const dt = Math.min((Date.now() - lastTime) / 1000, 0.016);\n  lastTime = Date.now();\n\n  gl.viewport(0, 0, textureWidth, textureHeight);\n\n  if (splatStack.length > 0) multipleSplats(splatStack.pop());\n\n  advectionProgram.bind();\n  gl.uniform2f(\n    advectionProgram.uniforms.texelSize,\n    1.0 / textureWidth,\n    1.0 / textureHeight\n  );\n  gl.uniform1i(advectionProgram.uniforms.uVelocity, velocity.read[2]);\n  gl.uniform1i(advectionProgram.uniforms.uSource, velocity.read[2]);\n  gl.uniform1f(advectionProgram.uniforms.dt, dt);\n  gl.uniform1f(\n    advectionProgram.uniforms.dissipation,\n    config.VELOCITY_DISSIPATION\n  );\n  blit(velocity.write[1]);\n  velocity.swap();\n\n  gl.uniform1i(advectionProgram.uniforms.uVelocity, velocity.read[2]);\n  gl.uniform1i(advectionProgram.uniforms.uSource, density.read[2]);\n  gl.uniform1f(\n    advectionProgram.uniforms.dissipation,\n    config.DENSITY_DISSIPATION\n  );\n  blit(density.write[1]);\n  density.swap();\n\n  for (let i = 0; i < pointers.length; i++) {\n    const pointer = pointers[i];\n    if (pointer.moved) {\n      splat(pointer.x, pointer.y, pointer.dx, pointer.dy, pointer.color);\n      pointer.moved = false;\n    }\n  }\n\n  curlProgram.bind();\n  gl.uniform2f(\n    curlProgram.uniforms.texelSize,\n    1.0 / textureWidth,\n    1.0 / textureHeight\n  );\n  gl.uniform1i(curlProgram.uniforms.uVelocity, velocity.read[2]);\n  blit(curl[1]);\n\n  vorticityProgram.bind();\n  gl.uniform2f(\n    vorticityProgram.uniforms.texelSize,\n    1.0 / textureWidth,\n    1.0 / textureHeight\n  );\n  gl.uniform1i(vorticityProgram.uniforms.uVelocity, velocity.read[2]);\n  gl.uniform1i(vorticityProgram.uniforms.uCurl, curl[2]);\n  gl.uniform1f(vorticityProgram.uniforms.curl, config.CURL);\n  gl.uniform1f(vorticityProgram.uniforms.dt, dt);\n  blit(velocity.write[1]);\n  velocity.swap();\n\n  divergenceProgram.bind();\n  gl.uniform2f(\n    divergenceProgram.uniforms.texelSize,\n    1.0 / textureWidth,\n    1.0 / textureHeight\n  );\n  gl.uniform1i(divergenceProgram.uniforms.uVelocity, velocity.read[2]);\n  blit(divergence[1]);\n\n  clearProgram.bind();\n  let pressureTexId = pressure.read[2];\n  gl.activeTexture(gl.TEXTURE0 + pressureTexId);\n  gl.bindTexture(gl.TEXTURE_2D, pressure.read[0]);\n  gl.uniform1i(clearProgram.uniforms.uTexture, pressureTexId);\n  gl.uniform1f(clearProgram.uniforms.value, config.PRESSURE_DISSIPATION);\n  blit(pressure.write[1]);\n  pressure.swap();\n\n  pressureProgram.bind();\n  gl.uniform2f(\n    pressureProgram.uniforms.texelSize,\n    1.0 / textureWidth,\n    1.0 / textureHeight\n  );\n  gl.uniform1i(pressureProgram.uniforms.uDivergence, divergence[2]);\n  pressureTexId = pressure.read[2];\n  gl.uniform1i(pressureProgram.uniforms.uPressure, pressureTexId);\n  gl.activeTexture(gl.TEXTURE0 + pressureTexId);\n  for (let i = 0; i < config.PRESSURE_ITERATIONS; i++) {\n    gl.bindTexture(gl.TEXTURE_2D, pressure.read[0]);\n    blit(pressure.write[1]);\n    pressure.swap();\n  }\n\n  gradienSubtractProgram.bind();\n  gl.uniform2f(\n    gradienSubtractProgram.uniforms.texelSize,\n    1.0 / textureWidth,\n    1.0 / textureHeight\n  );\n  gl.uniform1i(gradienSubtractProgram.uniforms.uPressure, pressure.read[2]);\n  gl.uniform1i(gradienSubtractProgram.uniforms.uVelocity, velocity.read[2]);\n  blit(velocity.write[1]);\n  velocity.swap();\n\n  gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n  displayProgram.bind();\n  gl.uniform1i(displayProgram.uniforms.uTexture, density.read[2]);\n  blit(null);\n\n  requestAnimationFrame(update);\n}\n\nfunction splat(x, y, dx, dy, color) {\n  splatProgram.bind();\n  gl.uniform1i(splatProgram.uniforms.uTarget, velocity.read[2]);\n  gl.uniform1f(splatProgram.uniforms.aspectRatio, canvas.width / canvas.height);\n  gl.uniform2f(\n    splatProgram.uniforms.point,\n    x / canvas.width,\n    1.0 - y / canvas.height\n  );\n  gl.uniform3f(splatProgram.uniforms.color, dx, -dy, 1.0);\n  gl.uniform1f(splatProgram.uniforms.radius, config.SPLAT_RADIUS);\n  blit(velocity.write[1]);\n  velocity.swap();\n\n  gl.uniform1i(splatProgram.uniforms.uTarget, density.read[2]);\n  gl.uniform3f(\n    splatProgram.uniforms.color,\n    color[0] * 0.3,\n    color[1] * 0.3,\n    color[2] * 0.3\n  );\n  blit(density.write[1]);\n  density.swap();\n}\n\nfunction multipleSplats(amount) {\n  for (let i = 0; i < amount; i++) {\n    const color = [Math.random() * 10, Math.random() * 10, Math.random() * 10];\n    const x = canvas.width * Math.random();\n    const y = canvas.height * Math.random();\n    const dx = 1000 * (Math.random() - 0.5);\n    const dy = 1000 * (Math.random() - 0.5);\n    splat(x, y, dx, dy, color);\n  }\n}\n\nfunction resizeCanvas() {\n  if (\n    canvas.width != canvas.clientWidth ||\n    canvas.height != canvas.clientHeight\n  ) {\n    canvas.width = canvas.clientWidth;\n    canvas.height = canvas.clientHeight;\n    initFramebuffers();\n  }\n}\n\nwindow.addEventListener('mousemove', ({ clientX, clientY }) => {\n  pointers[0].moved = pointers[0].down;\n  pointers[0].dx = (clientX - pointers[0].x) * 10.0;\n  pointers[0].dy = (clientY - pointers[0].y) * 10.0;\n  pointers[0].x = clientX;\n  pointers[0].y = clientY;\n});\n\nwindow.addEventListener('mouseover', () => {\n  pointers[0].down = true;\n  pointers[0].color = [\n    Math.random() + 0.2,\n    Math.random() + 0.2,\n    Math.random() + 0.2,\n  ];\n});\n\ncanvas.addEventListener(\n  'touchmove',\n  (e) => {\n    e.preventDefault();\n    const touches = e.targetTouches;\n    for (let i = 0; i < touches.length; i++) {\n      let pointer = pointers[i];\n      pointer.moved = pointer.down;\n      pointer.dx = (touches[i].pageX - pointer.x) * 10.0;\n      pointer.dy = (touches[i].pageY - pointer.y) * 10.0;\n      pointer.x = touches[i].pageX;\n      pointer.y = touches[i].pageY;\n    }\n  },\n  false\n);\n\ncanvas.addEventListener('touchstart', (e) => {\n  e.preventDefault();\n  const touches = e.targetTouches;\n  for (let i = 0; i < touches.length; i++) {\n    if (i >= pointers.length) pointers.push(new pointerPrototype());\n\n    pointers[i].id = touches[i].identifier;\n    pointers[i].down = true;\n    pointers[i].x = touches[i].pageX;\n    pointers[i].y = touches[i].pageY;\n    pointers[i].color = [\n      Math.random() + 0.2,\n      Math.random() + 0.2,\n      Math.random() + 0.2,\n    ];\n  }\n});\n\nwindow.addEventListener('mouseup', () => {\n  pointers[0].down = false;\n});\n\nwindow.addEventListener('touchend', (e) => {\n  const touches = e.changedTouches;\n  for (let i = 0; i < touches.length; i++)\n    for (let j = 0; j < pointers.length; j++)\n      if (touches[i].identifier == pointers[j].id) pointers[j].down = false;\n});\n"],"names":["canvas","document","getElementsByTagName","width","clientWidth","height","clientHeight","config","TEXTURE_DOWNSAMPLE","DENSITY_DISSIPATION","VELOCITY_DISSIPATION","PRESSURE_DISSIPATION","PRESSURE_ITERATIONS","CURL","SPLAT_RADIUS","pointers","splatStack","gl","ext","params","alpha","depth","stencil","antialias","getContext","isWebGL2","halfFloat","supportLinearFiltering","getExtension","clearColor","halfFloatTexType","HALF_FLOAT","HALF_FLOAT_OES","formatRGBA","formatRG","formatR","getSupportedFormat","RGBA16F","RGBA","RG16F","RG","R16F","RED","getWebGLContext","internalFormat","format","type","texture","createTexture","bindTexture","TEXTURE_2D","texParameteri","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","texImage2D","fbo","createFramebuffer","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","status","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","supportRenderTextureFormat","pointerPrototype","this","id","x","y","dx","dy","down","moved","color","push","GLProgram","constructor","vertexShader","fragmentShader","uniforms","program","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","uniformCount","ACTIVE_UNIFORMS","i","uniformName","getActiveUniform","name","getUniformLocation","bind","useProgram","compileShader","source","shader","createShader","shaderSource","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","baseVertexShader","VERTEX_SHADER","clearShader","FRAGMENT_SHADER","displayShader","splatShader","advectionManualFilteringShader","advectionShader","divergenceShader","curlShader","vorticityShader","pressureShader","gradientSubtractShader","textureWidth","textureHeight","density","velocity","divergence","curl","pressure","initFramebuffers","clearProgram","displayProgram","splatProgram","advectionProgram","divergenceProgram","curlProgram","vorticityProgram","pressureProgram","gradienSubtractProgram","drawingBufferWidth","drawingBufferHeight","texType","rgba","rg","r","createDoubleFBO","LINEAR","createFBO","texId","w","h","param","activeTexture","TEXTURE0","viewport","clear","COLOR_BUFFER_BIT","fbo1","fbo2","read","write","swap","temp","blit","bindBuffer","ARRAY_BUFFER","createBuffer","bufferData","Float32Array","STATIC_DRAW","ELEMENT_ARRAY_BUFFER","Uint16Array","vertexAttribPointer","FLOAT","enableVertexAttribArray","destination","drawElements","TRIANGLES","UNSIGNED_SHORT","lastTime","Date","now","splat","uniform1i","uTarget","uniform1f","aspectRatio","uniform2f","point","uniform3f","radius","multipleSplats","amount","Math","random","parseInt","update","dt","min","length","pop","texelSize","uVelocity","uSource","dissipation","pointer","uCurl","pressureTexId","uTexture","value","uDivergence","uPressure","requestAnimationFrame","window","addEventListener","_ref","clientX","clientY","e","preventDefault","touches","targetTouches","pageX","pageY","identifier","changedTouches","j"],"sourceRoot":""}